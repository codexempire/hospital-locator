{"version":3,"sources":["components/PlaceSearch.tsx","components/AppHeader.tsx","components/MapGl.tsx","components/Body.tsx","index.tsx"],"names":["PlaceSearch","props","address","setCoords","setAddress","processAddress","addressVal","a","geocodeByAddress","result","getLatLng","coords","alert","message","onChange","val","onSelect","value","getInputProps","suggestions","getSuggestionItemProps","loading","className","Input","placeholder","length","List","map","suggestion","ListItem","ListItemText","primary","description","AppHeader","AppBar","position","displayMap","distances","MapGL","coord","setSelectedHospital","listOfHospitals","useState","width","height","zoom","viewport","setViewPort","useEffect","latitude","lat","longitude","lng","mapboxApiAccessToken","mapStyle","onViewportChange","view","LocationOnSharp","style","color","hospital","key","id","geometry","coordinates","onClick","preventDefault","Card","CardContent","borderBottom","CardActionArea","Radio","checked","selected","e","setSelectedRadio","name","inputProps","Body","setListHospital","selectRadio","setState","fetch","then","res","json","data","console","log","features","catch","err","Container","maxWidth","km","dist","la","getGeocoding","Offline","online","displayOffline","WifiOff","top","window","location","reload","App","error","setPositionError","selectedHospital","setSelectedHospitals","setOnlineStat","setListOfHospitals","navigator","onLine","geolocation","getCurrentPosition","fixed","AddAlert","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ba115e82.chunk.js","sourcesContent":["import React from 'react';\r\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\r\nimport { Input, List, ListItem, ListItemText } from '@material-ui/core';\r\n\r\nexport interface PlaceSearchProps {\r\n    address: string,\r\n    setCoords: Function,\r\n    setAddress: Function,\r\n    displayMap: Boolean\r\n}\r\n\r\nconst PlaceSearch: React.FC<PlaceSearchProps> = props => {\r\n    const { address, setCoords, setAddress } = props;\r\n\r\n    const processAddress = async (addressVal: any) => {\r\n        try {\r\n            const result = await geocodeByAddress(addressVal);\r\n            const coords = await getLatLng(result[0]);\r\n\r\n            setCoords(coords);\r\n        } catch(error) {\r\n            alert(error.message);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <PlacesAutocomplete\r\n            onChange={(val) => setAddress(val)}\r\n            onSelect={(val) => processAddress(val)}\r\n            value={address}\r\n        >\r\n            {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n                <>\r\n                    <div className='place-finder-input'>\r\n                        <Input { ...getInputProps({ placeholder: 'Find hospital' })} />\r\n                    </div>\r\n\r\n                    {\r\n                        suggestions.length > 0 && (\r\n                            <List className='topper'>\r\n                                { suggestions.map((suggestion: any) => <ListItem><ListItemText primary={suggestion.description} /></ListItem>)}\r\n                            </List>\r\n                        )\r\n                    }\r\n                </>\r\n            )}\r\n        </PlacesAutocomplete>\r\n    )\r\n}\r\n\r\nexport default PlaceSearch;\r\n","import React from 'react';\r\nimport { AppBar } from '@material-ui/core';\r\nimport PlaceSearch, { PlaceSearchProps } from './PlaceSearch';\r\n\r\nconst AppHeader: React.FC<PlaceSearchProps> = props => {\r\n    return(\r\n        <AppBar position='static' className='app-header'>\r\n            <span className='title'>Hospitela</span>\r\n            { props.displayMap && <PlaceSearch { ...props } /> }\r\n        </AppBar>\r\n    )\r\n}\r\n\r\nexport default AppHeader;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Mapgl, { Marker } from 'react-map-gl';\r\nimport { LocationOnSharp } from '@material-ui/icons';\r\nimport { Card, CardActionArea, Radio, CardContent } from '@material-ui/core';\r\n\r\nexport interface MapGLProps {\r\n    coord: any,\r\n    setSelectedHospital: any\r\n    listOfHospitals: Array<any>,\r\n    setListHospital: Function,\r\n    selectedHospital: any,\r\n    selected: string,\r\n    setSelectedRadio: Function\r\n}\r\n\r\nconst tenKm = 0.0900900901;\r\nconst twentyKm = 0.1801801802;\r\nconst thirtyKm = 0.2702702703;\r\n\r\nconst distances: any = { '10Km': tenKm, '20Km': twentyKm, '30Km': thirtyKm };\r\n\r\nexport const getGeocoding = (coord: any, km: string, setState: Function) => {\r\n    let dist: any;\r\n    if(km !== 'none') dist = distances[km];\r\n    fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/hospital.json?types=poi&bbox=-${coord.lng - dist},${coord.lat - dist},${coord.lng + dist},${coord.la + dist}&access_token=pk.eyJ1IjoiY29kZXhlbXBpcmUiLCJhIjoiY2tiOWNydmxkMGN0ZzJ6cGk2eW5ucWVkYSJ9.3_IGZN9HiJ3Y8dxh5MCwpQ`)\r\n        .then(res => res.json())\r\n        .then(data => setState(data.features))\r\n        .catch(err => console.log(err.message));\r\n}\r\n\r\nexport const getHospitals = (coords: any, setState: any) => {\r\n    fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/hospital.json?region=ng&bbox=${coords.lng + -0.5},${coords.lat + -0.5},${coords.lng + 0.5},${coords.lat+ 0.5}&proximity=-${coords.lng},${coords.lat}&access_token=pk.eyJ1IjoiY29kZXhlbXBpcmUiLCJhIjoiY2tiOWNydmxkMGN0ZzJ6cGk2eW5ucWVkYSJ9.3_IGZN9HiJ3Y8dxh5MCwpQ`)\r\n        .then(res => res.json())\r\n        .then(data => { console.log(data); setState(data.features) })\r\n        .catch(err => console.log(err.message));\r\n}\r\n\r\nconst MapGL: React.FC<MapGLProps> = props => {\r\n\r\n    const { coord, setSelectedHospital, listOfHospitals } = props;\r\n\r\n    const [viewport, setViewPort]: any = useState({\r\n        width: '100%',\r\n        height: '100%',\r\n        zoom: 12\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        setViewPort({\r\n            ...viewport,\r\n            latitude: coord.lat,\r\n            longitude: coord.lng\r\n        });\r\n    }, [coord])\r\n\r\n    const selectHospital = (e: any) => {\r\n        e.preventDefault();\r\n        setSelectedHospital(coord);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Mapgl {...viewport}\r\n                mapboxApiAccessToken='pk.eyJ1IjoiY29kZXhlbXBpcmUiLCJhIjoiY2tiOWNydmxkMGN0ZzJ6cGk2eW5ucWVkYSJ9.3_IGZN9HiJ3Y8dxh5MCwpQ'\r\n                mapStyle='mapbox://styles/codexempire/ckb9dlcxs0why1iqhw08wqp9u'\r\n                onViewportChange={view => setViewPort({ ...view, width: viewport.width, height: viewport.height })}\r\n            >\r\n                {listOfHospitals.length > 0 && <Marker latitude={coord.lat} longitude={coord.lng}>\r\n                    <LocationOnSharp className='marker' width='100px' height='100px' style={{ color: 'blue' }} />\r\n                </Marker>}\r\n                {\r\n                    listOfHospitals.length > 0 && listOfHospitals.map((hospital: any) => (\r\n                        <Marker key={hospital.id} latitude={hospital.geometry.coordinates[1]} longitude={hospital.geometry.coordinates[0]}>\r\n                            <LocationOnSharp className='marker' onClick={() => selectHospital(hospital)} width='25px' height='25px' style={{ color: 'red' }} />\r\n                        </Marker>\r\n                    ))\r\n                }\r\n                {/* <Popup onClose={() => setSelectedHospital(null)}>\r\n                    <img src={} width='100%' height='4rem' />\r\n                    \r\n                </Popup> */}\r\n            </Mapgl>\r\n            {\r\n                !listOfHospitals.length && <span className='not-found'>No hospital found near your location</span>\r\n            }\r\n            <Card className='proximity-check'>\r\n                <CardContent style={{ borderBottom: '1px solid #333' }}>\r\n                    Search Radius\r\n                </CardContent>\r\n                <CardActionArea>\r\n                    <span>\r\n                        <Radio\r\n                            checked={props.selected === 'none'}\r\n                            // onChange={handleChange}\r\n                            onChange={(e) =>props.setSelectedRadio('none')}\r\n                            value=\"a\"\r\n                            name=\"radio-button-demo\"\r\n                            inputProps={{ 'aria-label': 'A' }}\r\n                        />\r\n                        <span>none</span>\r\n                    </span>\r\n                    <span>\r\n                        <Radio\r\n                            checked={props.selected === '10km'}\r\n                            // onChange={handleChange}\r\n                            onChange={() =>props.setSelectedRadio('10km')}\r\n                            value=\"a\"\r\n                            name=\"radio-button-demo\"\r\n                            inputProps={{ 'aria-label': 'A' }}\r\n                        />\r\n                        <span>10Km</span>\r\n                    </span>\r\n                    <span>\r\n                        <Radio\r\n                            checked={props.selected === '20km'}\r\n                            // onChange={handleChange}\r\n                            onChange={() =>props.setSelectedRadio('20km')}\r\n                            value=\"a\"\r\n                            name=\"radio-button-demo\"\r\n                            inputProps={{ 'aria-label': 'A' }}\r\n                        />\r\n                        <span>20Km</span>\r\n                    </span>\r\n                    <span>\r\n                        <Radio\r\n                            checked={props.selected === '30km'}\r\n                            // onChange={handleChange}\r\n                            onChange={() =>props.setSelectedRadio('30km')}\r\n                            value=\"b\"\r\n                            name=\"radio-button-demo\"\r\n                            inputProps={{ 'aria-label': 'B' }}\r\n                            \r\n                        />\r\n                        <span>30Km</span>\r\n                    </span>\r\n                </CardActionArea>\r\n            </Card>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MapGL;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Container } from '@material-ui/core';\r\nimport Map, { getHospitals, getGeocoding } from './MapGl';\r\n\r\nexport interface BodyProps {\r\n    coord: any,\r\n    setSelectedHospital: any\r\n    listOfHospitals: Array<any>,\r\n    setListHospital: Function,\r\n    selectedHospital: any,\r\n}\r\n\r\nconst Body: React.FC<BodyProps> = props => {\r\n    const { coord, listOfHospitals, setListHospital } = props\r\n    const [selected, selectRadio] = useState('none');\r\n\r\n    const setSelectedRadio = (val: string) => {\r\n        selectRadio(val);\r\n        getGeocoding(coord, val, props.setListHospital);\r\n    }\r\n    useEffect(() => {        \r\n        getHospitals(coord, setListHospital);\r\n    }, [coord,setListHospital]);\r\n    return (\r\n        <Container className='flex flex-row body-wrapper space-around-row' maxWidth='lg'>\r\n                <div className='map-box color-primary'>\r\n                    { listOfHospitals && <Map selected={selected} setSelectedRadio={setSelectedRadio} { ...props} />}\r\n                </div>\r\n        </Container>\r\n    )\r\n}\r\nexport default Body;\r\n","import React, { useEffect, useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\nimport AppHeader from './components/AppHeader';\r\nimport { Container, Card } from '@material-ui/core';\r\nimport { AddAlert, WifiOff } from '@material-ui/icons';\r\nimport Body from './components/Body';\r\n\r\ninterface offlineProps {\r\n    online: Boolean\r\n    displayOffline: Boolean\r\n}\r\n\r\nconst Offline: React.SFC<offlineProps> = props => (\r\n    !props.online || props.displayOffline ? <><WifiOff width='100px' height='100px' style={{ position: 'absolute', top: '40%'}} /><div className='offline-div'>You are presently offline check you internet connection and <span onClick={() => window.location.reload()}>retry</span></div></> : null\r\n);\r\n\r\nconst App: React.FC = () => {\r\n    const [coords, setCoords]: any = useState(null);\r\n    const [error, setPositionError]: any = useState(null);\r\n    const [selectedHospital, setSelectedHospitals] = useState(null);\r\n    const [address, setAddress]: any = useState('');\r\n    const [online, setOnlineStat]: any = useState(false);\r\n    const [listOfHospitals, setListOfHospitals]: any = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (navigator.onLine) {\r\n            setOnlineStat(navigator.onLine);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if(online) {\r\n            if (navigator && navigator.geolocation) {\r\n                navigator.geolocation.getCurrentPosition((position) => {\r\n                    const { coords: { latitude, longitude } } = position;\r\n                    setCoords({ lat: latitude, lng: longitude });\r\n                }, (err) => setPositionError(err));\r\n            }\r\n        }\r\n    }, [online]);\r\n\r\n    const displayMap = coords && !error;\r\n    const displayOffline = coords && error\r\n    console.log(online);\r\n    if (online) {\r\n        return (<Container fixed={true} maxWidth='md' className='flex flex-column'>\r\n            <AppHeader address={address} setCoords={setCoords} setAddress={setAddress} displayMap={displayMap} />\r\n            {error && <Card><AddAlert />{error.message}</Card>}\r\n            {displayOffline && <Offline online={online} displayOffline={true} />}\r\n            {displayMap && <Body coord={coords} setSelectedHospital={setSelectedHospitals} listOfHospitals={listOfHospitals} setListHospital={setListOfHospitals} selectedHospital={selectedHospital} /> }\r\n        </Container>)\r\n    } else { return <Offline online={online} displayOffline={true} /> }\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}